generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

model Account {
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    userId            String    @db.ObjectId
    type              String  
    provider          String  
    providerAccountId String  
    refresh_token     String?   @db.String
    access_token      String?   @db.String
    expires_at        Int?  
    token_type        String?  
    scope             String?  
    id_token          String?   @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    email          String    @unique
    emailVerified  DateTime?
    role           String?
    image          String?
    hashedPassword String?

    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    accounts Account[]
    comments Comment[]
    posts Post[]

}

model Post{
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    authorId          String    @db.ObjectId
    authorName        String?
    tags              String?
    content           String?
    title             String?
    likes             Int? 

    comments          Comment[]
    author            User      @relation(fields: [authorId], references: [id])

    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isModerated   Boolean

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @db.ObjectId
    
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String     @db.ObjectId
  
}




model Category{
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    authorID          String    @db.ObjectId
    authorName        String?
    name              String?

    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}